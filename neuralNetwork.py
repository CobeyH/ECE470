# -*- coding: utf-8 -*-
"""ECE 470 Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YvLUO-sRl9zvoD3Gopa3TuhANIVAwLYu

# ECE 470: House Price Predictions

Cobey Hollier V00893715 \
Kutay Cinar V00886983 \
Chris Dunn V00897180 \
Emmanuel Ayodele V00849004

##Pre Work
"""

# Basic Stuff
import sys
import math
import pandas as pd 

# Neural Networks
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import train_test_split

print ('Python version: {}'.format(sys.version))

# ------------------
#  ECE 470 Project 
# ------------------

train = pd.read_csv('train.csv')

# ------------------
#  Data Cleaning
# ------------------

def getAverageHousePrice(priceList1, priceList2):
	priceSum = 0
	for price in priceList1:
		priceSum += price
	for price in priceList2:
		priceSum += price
	return priceSum / (len(priceList1) + len(priceList2))

# Get dummy data
dummifiedDataframe = pd.get_dummies(train)
# Split data into test and validation
trainDf, validationDf = train_test_split(dummifiedDataframe, test_size=0.15, shuffle=True)
labelFeature = "SalePrice"

# Split the data and label into different dataframes
trainRealSalePrice = trainDf[labelFeature]
trainData = trainDf.drop([labelFeature], axis=1)
validationRealSalePrice = validationDf[labelFeature]
validationData = validationDf.drop([labelFeature], axis=1)

print('#------------------------------#')
print("#        Neural Network        #")
print('#------------------------------#')

# Create model
neuralNetwork = Sequential()
neuralNetwork.add(Dense(305, input_dim=305, kernel_initializer='normal', activation='relu'))
neuralNetwork.add(Dense(100, kernel_initializer='normal', activation='relu'))
neuralNetwork.add(Dense(10, kernel_initializer='normal', activation='relu'))
neuralNetwork.add(Dense(1, kernel_initializer='normal', activation='relu'))

# Compile model
neuralNetwork.compile(loss='mean_squared_error', optimizer='adam')

# Fit model
print("\nTraining Neural Network: This may take some time\n")
neuralNetwork.fit(trainData, trainRealSalePrice, epochs=2000, verbose=2)

# Predict values
validationResults = neuralNetwork.evaluate(validationData, validationRealSalePrice)
trainResults = neuralNetwork.evaluate(trainData, trainRealSalePrice)

# # Print Results
print("Results")
print('- Training error:', math.sqrt(trainResults))
print('- Validation error:', math.sqrt(validationResults))
print('- Score:', (round(1 - (math.sqrt(validationResults)/getAverageHousePrice(trainRealSalePrice, validationRealSalePrice)), 5)*100), '%')
print()
